package com.smartdline.watcher.receiver;

import java.util.HashMap;

import com.roidlibrary.utils.Logger;
import com.roidlibrary.utils.Toaster;
import com.smartdline.watcher.MyApplication;
import com.smartdline.watcher.R;
import com.smartdline.watcher.bluetooth.ble.BluetoothLeService;
import com.smartdline.watcher.bluetooth.ble.SampleGattAttributes;
import com.smartdline.watcher.common.BluetoothCmd;
import com.smartdline.watcher.service.BluetoothEncoderService;
import com.smartdline.watcher.utils.StringUtil;

import android.app.Service;
import android.bluetooth.BluetoothGattCharacteristic;
import android.content.BroadcastReceiver;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.provider.ContactsContract;
import android.telephony.PhoneStateListener;
import android.telephony.TelephonyManager;

public class PhoneReceiver extends BroadcastReceiver {

	private static final String TAG = PhoneReceiver.class.getSimpleName();
	private static boolean hasListener=false;

	private String mPhoneNumber;
	

	@Override
	public void onReceive(Context context, Intent intent) {
		// TODO Auto-generated method stub
		// 如果是去电
		if (intent.getAction().equals(Intent.ACTION_NEW_OUTGOING_CALL)) {
			String phoneNumber = intent
					.getStringExtra(Intent.EXTRA_PHONE_NUMBER);
			Logger.d(TAG, "call OUT:" + phoneNumber);
		} else {
			// 查了下android文档，貌似没有专门用于接收来电的action,所以，非去电即来电.
			// 如果我们想要监听电话的拨打状况，需要这么几步 :
			/*
			 * 第一：获取电话服务管理器TelephonyManager manager =
			 * this.getSystemService(TELEPHONY_SERVICE);
			 * 第二：通过TelephonyManager注册我们要监听的电话状态改变事件。manager.listen(new
			 * MyPhoneStateListener(), PhoneStateListener.LISTEN_CALL_STATE);
			 * 这里的PhoneStateListener.LISTEN_CALL_STATE就是我们想要
			 * 监听的状态改变事件，初次之外，还有很多其他事件哦。 第三步：通过extends
			 * PhoneStateListener来定制自己的规则。将其对象传递给第二步作为参数。
			 * 第四步：这一步很重要，那就是给应用添加权限。android.permission.READ_PHONE_STATE
			 */
			TelephonyManager tm = (TelephonyManager) context
					.getSystemService(Service.TELEPHONY_SERVICE);
			synchronized (tm) {
				// 设置一个监听器
				if (!hasListener) {
					hasListener = true;
					Logger.e(TAG, "设置一个电话监听器");
					tm.listen(listener, PhoneStateListener.LISTEN_CALL_STATE);
				}
			}
			

			// int state = tm.getCallState();
			// String phoneNumber =
			// intent.getStringExtra(TelephonyManager.EXTRA_INCOMING_NUMBER);
			// switch(state){
			// case TelephonyManager.CALL_STATE_RINGING:
			// // Log.i(TAG, "[Broadcast]等待接电话="+phoneNumber);
			// Logger.e(TAG, "响铃:来电号码" + phoneNumber);
			// if(phoneNumber!=null){
			// answering(phoneNumber);
			// }
			// break;
			// case TelephonyManager.CALL_STATE_IDLE:
			// // Log.i(TAG, "[Broadcast]电话挂断="+phoneNumber);
			// if(phoneNumber!=null){
			// handUP(phoneNumber);
			// }
			// break;
			// case TelephonyManager.CALL_STATE_OFFHOOK:
			// // Log.i(TAG, "[Broadcast]通话中="+phoneNumber);
			// break;
			// }
		}
	}

	PhoneStateListener listener = new PhoneStateListener() {
		@Override
		public void onCallStateChanged(int state, String incomingNumber) {
			// 注意，方法必须写在super方法后面，否则incomingNumber无法获取到值。
			super.onCallStateChanged(state, incomingNumber);
			switch (state) {
			case TelephonyManager.CALL_STATE_IDLE:
				Logger.e(TAG, "挂断" + incomingNumber);
				if (mPhoneNumber != null) {
					handUP(mPhoneNumber);
				}
				mPhoneNumber=null;
				break;
			case TelephonyManager.CALL_STATE_OFFHOOK:
				Logger.e(TAG, "接听");
				break;
			case TelephonyManager.CALL_STATE_RINGING:
				mPhoneNumber = incomingNumber;
				Logger.e(TAG, "响铃:来电号码" + mPhoneNumber);
				answering(mPhoneNumber);
				break;
			}
		}
	};

	private void handUP(String phoneNumber) {
		sendBluetoothCmd(
				BluetoothEncoderService.getInstance().sendPhone(
						BluetoothCmd.SEND_PHONE_CN, (byte) 0x00,
						getContactNameFromPhoneBook(phoneNumber), phoneNumber),
				SampleGattAttributes.WATCHER_CHARACTERISTIC_1,
				SampleGattAttributes.WATCHER_CHARACTERISTIC_4);
	}

	private void answering(String phoneNumber) {
		sendBluetoothCmd(
				BluetoothEncoderService.getInstance().sendPhone(
						BluetoothCmd.SEND_PHONE_CN, (byte) 0x01,
						getContactNameFromPhoneBook(phoneNumber), phoneNumber),
				SampleGattAttributes.WATCHER_CHARACTERISTIC_1,
				SampleGattAttributes.WATCHER_CHARACTERISTIC_4);
	}

	/**
	 * 根据电话号码获取联系人
	 * 
	 * @param context
	 * @param phoneNum
	 * @return
	 */
	public String getContactNameFromPhoneBook(String phoneNum) {
		String contactName = "";
		ContentResolver cr = MyApplication.getInstance().getContentResolver();
		Cursor pCur = cr.query(
				ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null,
				ContactsContract.CommonDataKinds.Phone.NUMBER + " = ?",
				new String[] { phoneNum }, null);
		if (pCur.moveToFirst()) {
			contactName = pCur
					.getString(pCur
							.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
			pCur.close();
		}
		return contactName;

		// HashMap<String, String> contacts = (HashMap<String, String>)
		// MyApplication.getInstance().getContacts();
		//
		// if(contacts.containsKey(phoneNum))
		// return contacts.get(phoneNum);
		// else if(contacts.containsKey("+86"+phoneNum))
		// return contacts.get("+86"+phoneNum);
		// else
		// return "UNKNOWN";
	}

	private void sendBluetoothCmd(byte[] sendData, String writeKey,
			String readKey) {
		BluetoothLeService mBluetoothLeService = MyApplication.getInstance()
				.getBluetoothLeService();
		if (mBluetoothLeService == null) {
			return;
		}
		BluetoothGattCharacteristic characteristic = mBluetoothLeService
				.getGattCharacteristics().get(writeKey);
		if (characteristic == null) {
			return;
		}
		BluetoothGattCharacteristic characteristicNotify = mBluetoothLeService
				.getGattCharacteristics().get(readKey);
		characteristic.setValue(sendData);
		mBluetoothLeService.setAckFlag(false);
		mBluetoothLeService.writeCharacteristic(characteristic);

		Logger.d(TAG, "write" + StringUtil.toHexString(sendData));
	}

}
